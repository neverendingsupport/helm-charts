apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nes-node-web.fullname" . }}
  namespace:
spec:
  progressDeadlineSeconds: 600
  replicas: {{ default 1 .Values.replicaCount }}
  strategy:
{{ toYaml .Values.deployment.strategy | indent 4 }}
  selector:
    matchLabels:
      app: {{ include "nes-node-web.fullname" . }}
      release: {{ .Values.release }}
  template:
    metadata:
      labels:
        app: {{ include "nes-node-web.fullname" . }}
        release: {{ .Values.release }}
    spec:
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret }}
      {{- end }}
      containers:
        - name: {{ include "nes-node-web.fullname" . }}
          image: "{{ .Values.image.repository }}:{{ required "A valid App Version must be provided to .Values.version" .Values.version }}"
          imagePullPolicy: Always
          {{- if .Values.volumes }}
          volumeMounts:
          {{- range $key, $value := .Values.volumes.mounts }}
          - {{ $value | toYaml | indent 12 | trim }}
          {{- end }}  
          {{- end }}  
          resources:
            limits:
              memory: {{ default "350Mi" .Values.resources.limits.memory }}
              cpu: {{ default "110m" .Values.resources.limits.cpu }}
            requests:
              memory: {{ default "300Mi" .Values.resources.requests.memory }}
              cpu: {{ default "100m" .Values.resources.requests.cpu }}
          {{- if .Values.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ required "A valid .Values.liveness.path!" .Values.liveness.path }}
              port: {{ required "A valid .Values.port entry is required!" .Values.port }}
              scheme: HTTP
            failureThreshold: {{ required "A valid .Values.liveness.thresholds.failure!" .Values.liveness.thresholds.failure }}
            initialDelaySeconds: {{ required "A valid .Values.liveness.initialDelay!" .Values.liveness.initialDelay }} 
            periodSeconds: {{ required "A valid .Values.liveness.period!" .Values.liveness.period }}
            successThreshold: {{ required "A valid .Values.liveness.thresholds.success!" .Values.liveness.thresholds.success }}
            timeoutSeconds: {{ required "A valid .Values.liveness.timeout!" .Values.liveness.timeout }}
          readinessProbe:
            httpGet:
              path: {{ required "A valid .Values.liveness.path!" .Values.liveness.path }}
              port: {{ required "A valid .Values.port entry is required!" .Values.port }}
              scheme: HTTP
            failureThreshold: {{ required "A valid .Values.liveness.thresholds.failure!" .Values.liveness.thresholds.failure }}
            initialDelaySeconds: {{ required "A valid .Values.liveness.initialDelay!" .Values.liveness.initialDelay }} 
            periodSeconds: {{ required "A valid .Values.liveness.period!" .Values.liveness.period }}
            successThreshold: {{ required "A valid .Values.liveness.thresholds.success!" .Values.liveness.thresholds.success }}
            timeoutSeconds: {{ required "A valid .Values.liveness.timeout!" .Values.liveness.timeout }}
          {{- end }}
          ports:
            - containerPort: {{ required "A valid .Values.port entry is required!" .Values.port }}
              name: http
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          {{- range $key, $value := .Values.env }}
          - {{ $value | toYaml | indent 12 | trim }}
          {{ end }} 

      volumes:
        {{- with .Values.volumes }}
        {{- range .definitions }}
          - name: {{ .name }}
            secret:
              secretName: {{ .secret.secretName }}
        {{- end }}
        {{- end }}